# -*- coding: utf-8 -*-
"""Stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iQoIhnYZtiket2ZQAAQA0wN5TiDSzHs6

<h2>Stock Sentiment Analysis Using News Headline.

 * The data set in consideration is a combination of the world news and stock price shifts.
 * Data ranges from 2008 to 2016 and the data from 2000 to 2008 was scrapped from Yahoo finance.
 * There are 25 columns of top news headlines for each day in the data frame.
 * Class 1- the stock price increased.
 * Class 0- the stock price stayed the same or decreased.
"""

import pandas as pd
import nltk
from gensim.models import Word2Vec
from nltk.corpus import stopwords
import re

df = pd.read_csv("/content/data.csv")
df

train=df[df['Date']<'20150101']
test=df[df['Date']>'20141231']
train.shape

data = train.iloc[:,2:27]
data

data.replace("[^A-za-z]"," ",regex = True,inplace=True)

for col in data.columns:
    data[col]=data[col].str.lower()

headlines = []
for row in range(0,len(data.index)):
    headlines.append(' '.join(str(x) for x in data.iloc[row,0:25]))
headlines

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(train, train['Label'], test_size = 0.20)

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
## implement BAG OF WORDS
countvector=CountVectorizer(ngram_range=(2,2))
traindataset=countvector.fit_transform(headlines)
# implement RandomForest Classifier
randomclassifier=RandomForestClassifier(n_estimators=200,criterion='entropy')
randomclassifier.fit(traindataset,train['Label'])

## Predict for the Test Dataset
test_transform= []
for row in range(0,len(test.index)):
    test_transform.append(' '.join(str(x) for x in test.iloc[row,2:27]))
test_dataset = countvector.transform(test_transform)
predictions = randomclassifier.predict(test_dataset)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
cm=confusion_matrix(test['Label'],predictions)
cm

score=accuracy_score(test['Label'],predictions)
score

report=classification_report(test['Label'],predictions)
report

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
## implement Tfidf
countvector=TfidfVectorizer(ngram_range=(2,2))
traindataset=countvector.fit_transform(headlines)
# implement RandomForest Classifier
randomclassifier=RandomForestClassifier(n_estimators=200,criterion='entropy')
randomclassifier.fit(traindataset,train['Label'])

test_transform= []
for row in range(0,len(test.index)):
    test_transform.append(' '.join(str(x) for x in test.iloc[row,2:27]))
test_dataset = countvector.transform(test_transform)
predictions = randomclassifier.predict(test_dataset)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
cm=confusion_matrix(test['Label'],predictions)
cm

score=accuracy_score(test['Label'],predictions)
score